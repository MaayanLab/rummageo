query Stats {
  userGeneSets {
    totalCount
  }
  humanGeneSets: geneSets(condition: {species: "human"}) {
    totalCount
  }
  mouseGeneSets: geneSets(condition: {species: "mouse"}) {
    totalCount
  }
  totalGeneSets: geneSets {
    totalCount
  }
  gses {
    totalCount
  }
}


query FetchUserGeneSet($id: UUID!) {
  userGeneSet(id: $id) {
    genes
    description
  }
}

# Perform enrichment analysis against a specific library
query EnrichmentQuery($genes: [String]!, $filterTerm: String = "", $offset: Int = 0, $first: Int = 10, $id: UUID!, $filterScoreLe: Float = -1.1) {
  background(id: $id) {
    id
    species
    enrich(
      genes: $genes
      filterTerm: $filterTerm
      offset: $offset
      first: $first
      filterScoreLe: $filterScoreLe
    ) {
      nodes {
        pvalue
        adjPvalue
        oddsRatio
        nOverlap
        geneSet {
          id
          term
          nGeneIds
          geneSetPmidsById {
            nodes {
              gse
              gseId
              pmid
              sampleGroups
              platform
              publishedDate
              title
              gseAttrs
              silhouetteScore
            }
          }
        }
      }
      totalCount
      enrichedTerms
    }
  }
}


# Perform term enrichment analysis against a specific set of terms ("llm_attrs", "mesh_attrs", "pubmed_attrs")
query TermEnrichment($enrichedTerms: [String], $sourceType: String = "llm_attrs", $species: String = "human") {
  enrichedFunctionalTerms(enrichedTerms: $enrichedTerms, sourceType: $sourceType organism: $species) {
    adjPvalue
    count
    oddsRatio
    notTermCount
    pvalue
    term
    totalNotTermCount
    totalTermCount
  }
}



# Gene search: find all genesets containing certain gene(s)
query GeneSearch($genes: [String]!, $offset: Int = 0, $first: Int = 10) {
  geneSetGeneSearch(genes: $genes, offset: $offset, first: $first) {
    nodes {
      term
    }
    totalCount
  }
}

query TermSearch($terms: [String]! = ["neuron"], $offset: Int = 0, $first: Int = 10) {
  geneSetTermSearch(terms: $terms, offset: $offset, first: $first) {
    nodes {
      id
      term
      gse
      platform
      pmid
      publishedDate
      sampleGroups
      title
      geneSetById {
        nGeneIds
        species
      }
    }
    totalCount
  }
}



mutation AddUserGeneSet($genes: [String], $description: String = "") {
  addUserGeneSet(input: {genes: $genes, description: $description}) {
    userGeneSet {
      id
    }
  }
}


query TermsPmcs($pmcids: [String]!) {
  termsPmcsCount(pmcids: $pmcids) {
    nodes {
      pmc
      id
      term
      count
    }
  }
}

query ViewGeneSet($id: UUID!) {
  geneSet(id: $id) {
    genes {
      nodes {
        symbol
      }
    }
  }
}

query OverlapQuery($id: UUID!, $genes: [String]!) {
  geneSet(id: $id) {
    overlap(genes: $genes) {
      nodes {
        symbol
      }
    }
  }
}

query LatestRelease {
  releases(orderBy: CREATED_DESC, first: 1) {
    nodes {
      created
    }
  }
}

query getBackgrounds {
  backgrounds{
    nodes {
      species
      id
      created
    }
  }
}

query QueryGsmMeta($gsms: [String]! = ["GSM4648170", "GSM4648184", "GSM4648189"]) {
  getGsmMeta(gsms: $gsms){
    nodes {
      gse
      gsm
      title
      characteristicsCh1
      sourceNameCh1
    }
  }
}

query QueryPbGeneSets($pmids: [String]!) {
  getPbInfoByIds(pmids:$pmids) {
    nodes {
      id
      gse
      pmid
      title
      sampleGroups
      geneSetById {
        term
        species
        nGeneIds
      }
    }
    totalCount
  }
}

query GetPmidInfo($pmids: [String]! = ["33378647"]) {
  getPbMetaByIds(pmids: $pmids) {
    nodes {
      pmid
      pubDate
      title
      doi
    }
    totalCount
  }
}